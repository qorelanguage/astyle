!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ASBeautifier	ASBeautifier.cpp	/^ASBeautifier::ASBeautifier()$/;"	f	class:astyle::ASBeautifier
ASBeautifier	ASBeautifier.cpp	/^ASBeautifier::ASBeautifier(const ASBeautifier& other) : ASBase(other)$/;"	f	class:astyle::ASBeautifier
ASConsole	astyle_main.cpp	/^ASConsole::ASConsole(ASFormatter& formatterArg) : formatter(formatterArg)$/;"	f	class:astyle::ASConsole
ASEnhancer	ASEnhancer.cpp	/^ASEnhancer::ASEnhancer()$/;"	f	class:astyle::ASEnhancer
ASFormatter	ASFormatter.cpp	/^ASFormatter::ASFormatter()$/;"	f	class:astyle::ASFormatter
ASLocalizer	ASLocalizer.cpp	/^ASLocalizer::ASLocalizer()$/;"	f	class:astyle::ASLocalizer
ASOptions	astyle_main.cpp	/^ASOptions::ASOptions(ASFormatter& formatterArg)$/;"	f	class:astyle::ASOptions
ASOptions	astyle_main.cpp	/^ASOptions::ASOptions(ASFormatter& formatterArg, ASConsole& consoleArg)$/;"	f	class:astyle::ASOptions
ASStreamIterator	astyle_main.cpp	/^ASStreamIterator<T>::ASStreamIterator(T* in)$/;"	f	class:astyle::ASStreamIterator
AS_ADD	ASResource.cpp	/^const string ASResource::AS_ADD = string("add");$/;"	m	class:astyle::ASResource	file:
AS_AND	ASResource.cpp	/^const string ASResource::AS_AND = string("&&");$/;"	m	class:astyle::ASResource	file:
AS_AND_ASSIGN	ASResource.cpp	/^const string ASResource::AS_AND_ASSIGN = string("&=");$/;"	m	class:astyle::ASResource	file:
AS_ARROW	ASResource.cpp	/^const string ASResource::AS_ARROW = string("->");$/;"	m	class:astyle::ASResource	file:
AS_ASM	ASResource.cpp	/^const string ASResource::AS_ASM = string("asm");$/;"	m	class:astyle::ASResource	file:
AS_ASSIGN	ASResource.cpp	/^const string ASResource::AS_ASSIGN = string("=");$/;"	m	class:astyle::ASResource	file:
AS_AUTO	ASResource.cpp	/^const string ASResource::AS_AUTO = string("auto");$/;"	m	class:astyle::ASResource	file:
AS_AUTORELEASEPOOL	ASResource.cpp	/^const string ASResource::AS_AUTORELEASEPOOL = string("autoreleasepool");$/;"	m	class:astyle::ASResource	file:
AS_BAR_DEFINE	ASResource.cpp	/^const string ASResource::AS_BAR_DEFINE = string("#define");$/;"	m	class:astyle::ASResource	file:
AS_BAR_EL	ASResource.cpp	/^const string ASResource::AS_BAR_EL = string("#el");$/;"	m	class:astyle::ASResource	file:
AS_BAR_ENDIF	ASResource.cpp	/^const string ASResource::AS_BAR_ENDIF = string("#endif");$/;"	m	class:astyle::ASResource	file:
AS_BAR_IF	ASResource.cpp	/^const string ASResource::AS_BAR_IF = string("#if");$/;"	m	class:astyle::ASResource	file:
AS_BAR_INCLUDE	ASResource.cpp	/^const string ASResource::AS_BAR_INCLUDE = string("#include");$/;"	m	class:astyle::ASResource	file:
AS_BIT_AND	ASResource.cpp	/^const string ASResource::AS_BIT_AND = string("&");$/;"	m	class:astyle::ASResource	file:
AS_BIT_NOT	ASResource.cpp	/^const string ASResource::AS_BIT_NOT = string("~");$/;"	m	class:astyle::ASResource	file:
AS_BIT_OR	ASResource.cpp	/^const string ASResource::AS_BIT_OR = string("|");$/;"	m	class:astyle::ASResource	file:
AS_BIT_XOR	ASResource.cpp	/^const string ASResource::AS_BIT_XOR = string("^");$/;"	m	class:astyle::ASResource	file:
AS_CASE	ASResource.cpp	/^const string ASResource::AS_CASE = string("case");$/;"	m	class:astyle::ASResource	file:
AS_CATCH	ASResource.cpp	/^const string ASResource::AS_CATCH = string("catch");$/;"	m	class:astyle::ASResource	file:
AS_CERR	ASResource.cpp	/^const string ASResource::AS_CERR = string("cerr");$/;"	m	class:astyle::ASResource	file:
AS_CIN	ASResource.cpp	/^const string ASResource::AS_CIN = string("cin");$/;"	m	class:astyle::ASResource	file:
AS_CLASS	ASResource.cpp	/^const string ASResource::AS_CLASS = string("class");$/;"	m	class:astyle::ASResource	file:
AS_CLOSE_BRACE	ASResource.cpp	/^const string ASResource::AS_CLOSE_BRACE = string("}");$/;"	m	class:astyle::ASResource	file:
AS_CLOSE_COMMENT	ASResource.cpp	/^const string ASResource::AS_CLOSE_COMMENT = string("*\/");$/;"	m	class:astyle::ASResource	file:
AS_COLON	ASResource.cpp	/^const string ASResource::AS_COLON = string(":");$/;"	m	class:astyle::ASResource	file:
AS_COMMA	ASResource.cpp	/^const string ASResource::AS_COMMA = string(",");$/;"	m	class:astyle::ASResource	file:
AS_CONST	ASResource.cpp	/^const string ASResource::AS_CONST = string("const");$/;"	m	class:astyle::ASResource	file:
AS_CONST_CAST	ASResource.cpp	/^const string ASResource::AS_CONST_CAST = string("const_cast");$/;"	m	class:astyle::ASResource	file:
AS_COUT	ASResource.cpp	/^const string ASResource::AS_COUT = string("cout");$/;"	m	class:astyle::ASResource	file:
AS_DEFAULT	ASResource.cpp	/^const string ASResource::AS_DEFAULT = string("default");$/;"	m	class:astyle::ASResource	file:
AS_DELEGATE	ASResource.cpp	/^const string ASResource::AS_DELEGATE = string("delegate");$/;"	m	class:astyle::ASResource	file:
AS_DELETE	ASResource.cpp	/^const string ASResource::AS_DELETE = string("delete");$/;"	m	class:astyle::ASResource	file:
AS_DIV	ASResource.cpp	/^const string ASResource::AS_DIV = string("\/");$/;"	m	class:astyle::ASResource	file:
AS_DIV_ASSIGN	ASResource.cpp	/^const string ASResource::AS_DIV_ASSIGN = string("\/=");$/;"	m	class:astyle::ASResource	file:
AS_DO	ASResource.cpp	/^const string ASResource::AS_DO = string("do");$/;"	m	class:astyle::ASResource	file:
AS_DYNAMIC_CAST	ASResource.cpp	/^const string ASResource::AS_DYNAMIC_CAST = string("dynamic_cast");$/;"	m	class:astyle::ASResource	file:
AS_ELSE	ASResource.cpp	/^const string ASResource::AS_ELSE = string("else");$/;"	m	class:astyle::ASResource	file:
AS_END	ASResource.cpp	/^const string ASResource::AS_END = string("end");$/;"	m	class:astyle::ASResource	file:
AS_ENUM	ASResource.cpp	/^const string ASResource::AS_ENUM = string("enum");$/;"	m	class:astyle::ASResource	file:
AS_EQUAL	ASResource.cpp	/^const string ASResource::AS_EQUAL = string("==");$/;"	m	class:astyle::ASResource	file:
AS_EXTERN	ASResource.cpp	/^const string ASResource::AS_EXTERN = string("extern");$/;"	m	class:astyle::ASResource	file:
AS_FINAL	ASResource.cpp	/^const string ASResource::AS_FINAL = string("final");$/;"	m	class:astyle::ASResource	file:
AS_FINALLY	ASResource.cpp	/^const string ASResource::AS_FINALLY = string("finally");$/;"	m	class:astyle::ASResource	file:
AS_FIXED	ASResource.cpp	/^const string ASResource::AS_FIXED = string("fixed");$/;"	m	class:astyle::ASResource	file:
AS_FOR	ASResource.cpp	/^const string ASResource::AS_FOR = string("for");$/;"	m	class:astyle::ASResource	file:
AS_FOREACH	ASResource.cpp	/^const string ASResource::AS_FOREACH = string("foreach");$/;"	m	class:astyle::ASResource	file:
AS_FOREVER	ASResource.cpp	/^const string ASResource::AS_FOREVER = string("forever");$/;"	m	class:astyle::ASResource	file:
AS_GCC_MAX_ASSIGN	ASResource.cpp	/^const string ASResource::AS_GCC_MAX_ASSIGN = string(">?");$/;"	m	class:astyle::ASResource	file:
AS_GCC_MIN_ASSIGN	ASResource.cpp	/^const string ASResource::AS_GCC_MIN_ASSIGN = string("<?");$/;"	m	class:astyle::ASResource	file:
AS_GET	ASResource.cpp	/^const string ASResource::AS_GET = string("get");$/;"	m	class:astyle::ASResource	file:
AS_GR	ASResource.cpp	/^const string ASResource::AS_GR = string(">");$/;"	m	class:astyle::ASResource	file:
AS_GR_EQUAL	ASResource.cpp	/^const string ASResource::AS_GR_EQUAL = string(">=");$/;"	m	class:astyle::ASResource	file:
AS_GR_GR	ASResource.cpp	/^const string ASResource::AS_GR_GR = string(">>");$/;"	m	class:astyle::ASResource	file:
AS_GR_GR_ASSIGN	ASResource.cpp	/^const string ASResource::AS_GR_GR_ASSIGN = string(">>=");$/;"	m	class:astyle::ASResource	file:
AS_GR_GR_GR	ASResource.cpp	/^const string ASResource::AS_GR_GR_GR = string(">>>");$/;"	m	class:astyle::ASResource	file:
AS_GR_GR_GR_ASSIGN	ASResource.cpp	/^const string ASResource::AS_GR_GR_GR_ASSIGN = string(">>>=");$/;"	m	class:astyle::ASResource	file:
AS_IF	ASResource.cpp	/^const string ASResource::AS_IF = string("if");$/;"	m	class:astyle::ASResource	file:
AS_INTERFACE	ASResource.cpp	/^const string ASResource::AS_INTERFACE = string("interface");$/;"	m	class:astyle::ASResource	file:
AS_INTERRUPT	ASResource.cpp	/^const string ASResource::AS_INTERRUPT = string("interrupt");$/;"	m	class:astyle::ASResource	file:
AS_LAMBDA	ASResource.cpp	/^const string ASResource::AS_LAMBDA = string("=>");            \/\/ C# lambda expression arrow$/;"	m	class:astyle::ASResource	file:
AS_LET	ASResource.cpp	/^const string ASResource::AS_LET = string("let");$/;"	m	class:astyle::ASResource	file:
AS_LOCK	ASResource.cpp	/^const string ASResource::AS_LOCK = string("lock");$/;"	m	class:astyle::ASResource	file:
AS_LS	ASResource.cpp	/^const string ASResource::AS_LS = string("<");$/;"	m	class:astyle::ASResource	file:
AS_LS_EQUAL	ASResource.cpp	/^const string ASResource::AS_LS_EQUAL = string("<=");$/;"	m	class:astyle::ASResource	file:
AS_LS_LS	ASResource.cpp	/^const string ASResource::AS_LS_LS = string("<<");$/;"	m	class:astyle::ASResource	file:
AS_LS_LS_ASSIGN	ASResource.cpp	/^const string ASResource::AS_LS_LS_ASSIGN = string("<<=");$/;"	m	class:astyle::ASResource	file:
AS_LS_LS_LS	ASResource.cpp	/^const string ASResource::AS_LS_LS_LS = string("<<<");$/;"	m	class:astyle::ASResource	file:
AS_LS_LS_LS_ASSIGN	ASResource.cpp	/^const string ASResource::AS_LS_LS_LS_ASSIGN = string("<<<=");$/;"	m	class:astyle::ASResource	file:
AS_MINUS	ASResource.cpp	/^const string ASResource::AS_MINUS = string("-");$/;"	m	class:astyle::ASResource	file:
AS_MINUS_ASSIGN	ASResource.cpp	/^const string ASResource::AS_MINUS_ASSIGN = string("-=");$/;"	m	class:astyle::ASResource	file:
AS_MINUS_MINUS	ASResource.cpp	/^const string ASResource::AS_MINUS_MINUS = string("--");$/;"	m	class:astyle::ASResource	file:
AS_MOD	ASResource.cpp	/^const string ASResource::AS_MOD = string("%");$/;"	m	class:astyle::ASResource	file:
AS_MODULE	ASResource.cpp	/^const string ASResource::AS_MODULE = string("module");	\/\/ CORBA IDL module definition$/;"	m	class:astyle::ASResource	file:
AS_MOD_ASSIGN	ASResource.cpp	/^const string ASResource::AS_MOD_ASSIGN = string("%=");$/;"	m	class:astyle::ASResource	file:
AS_MS_ASM	ASResource.cpp	/^const string ASResource::AS_MS_ASM = string("_asm");$/;"	m	class:astyle::ASResource	file:
AS_MS__ASM	ASResource.cpp	/^const string ASResource::AS_MS__ASM = string("__asm");$/;"	m	class:astyle::ASResource	file:
AS_MULT	ASResource.cpp	/^const string ASResource::AS_MULT = string("*");$/;"	m	class:astyle::ASResource	file:
AS_MULT_ASSIGN	ASResource.cpp	/^const string ASResource::AS_MULT_ASSIGN = string("*=");$/;"	m	class:astyle::ASResource	file:
AS_NAMESPACE	ASResource.cpp	/^const string ASResource::AS_NAMESPACE = string("namespace");$/;"	m	class:astyle::ASResource	file:
AS_NEW	ASResource.cpp	/^const string ASResource::AS_NEW = string("new");$/;"	m	class:astyle::ASResource	file:
AS_NOEXCEPT	ASResource.cpp	/^const string ASResource::AS_NOEXCEPT = string("noexcept");$/;"	m	class:astyle::ASResource	file:
AS_NOT	ASResource.cpp	/^const string ASResource::AS_NOT = string("!");$/;"	m	class:astyle::ASResource	file:
AS_NOT_EQUAL	ASResource.cpp	/^const string ASResource::AS_NOT_EQUAL = string("!=");$/;"	m	class:astyle::ASResource	file:
AS_NS_DURING	ASResource.cpp	/^const string ASResource::AS_NS_DURING = string("NS_DURING");$/;"	m	class:astyle::ASResource	file:
AS_NS_HANDLER	ASResource.cpp	/^const string ASResource::AS_NS_HANDLER = string("NS_HANDLER");$/;"	m	class:astyle::ASResource	file:
AS_OPEN_BRACE	ASResource.cpp	/^const string ASResource::AS_OPEN_BRACE = string("{");$/;"	m	class:astyle::ASResource	file:
AS_OPEN_COMMENT	ASResource.cpp	/^const string ASResource::AS_OPEN_COMMENT = string("\/*");$/;"	m	class:astyle::ASResource	file:
AS_OPEN_LINE_COMMENT	ASResource.cpp	/^const string ASResource::AS_OPEN_LINE_COMMENT = string("\/\/");$/;"	m	class:astyle::ASResource	file:
AS_OPERATOR	ASResource.cpp	/^const string ASResource::AS_OPERATOR = string("operator");$/;"	m	class:astyle::ASResource	file:
AS_OR	ASResource.cpp	/^const string ASResource::AS_OR = string("||");$/;"	m	class:astyle::ASResource	file:
AS_OR_ASSIGN	ASResource.cpp	/^const string ASResource::AS_OR_ASSIGN = string("|=");$/;"	m	class:astyle::ASResource	file:
AS_OVERRIDE	ASResource.cpp	/^const string ASResource::AS_OVERRIDE = string("override");$/;"	m	class:astyle::ASResource	file:
AS_PLUS	ASResource.cpp	/^const string ASResource::AS_PLUS = string("+");$/;"	m	class:astyle::ASResource	file:
AS_PLUS_ASSIGN	ASResource.cpp	/^const string ASResource::AS_PLUS_ASSIGN = string("+=");$/;"	m	class:astyle::ASResource	file:
AS_PLUS_PLUS	ASResource.cpp	/^const string ASResource::AS_PLUS_PLUS = string("++");$/;"	m	class:astyle::ASResource	file:
AS_PRIVATE	ASResource.cpp	/^const string ASResource::AS_PRIVATE = string("private");$/;"	m	class:astyle::ASResource	file:
AS_PROTECTED	ASResource.cpp	/^const string ASResource::AS_PROTECTED = string("protected");$/;"	m	class:astyle::ASResource	file:
AS_PUBLIC	ASResource.cpp	/^const string ASResource::AS_PUBLIC = string("public");$/;"	m	class:astyle::ASResource	file:
AS_QFOREACH	ASResource.cpp	/^const string ASResource::AS_QFOREACH = string("Q_FOREACH");$/;"	m	class:astyle::ASResource	file:
AS_QFOREVER	ASResource.cpp	/^const string ASResource::AS_QFOREVER = string("Q_FOREVER");$/;"	m	class:astyle::ASResource	file:
AS_QUESTION	ASResource.cpp	/^const string ASResource::AS_QUESTION = string("?");$/;"	m	class:astyle::ASResource	file:
AS_QUESTION_QUESTION	ASResource.cpp	/^const string ASResource::AS_QUESTION_QUESTION = string("??");$/;"	m	class:astyle::ASResource	file:
AS_Q_ANY	ASResource.cpp	/^const string ASResource::AS_Q_ANY = string("any");$/;"	m	class:astyle::ASResource	file:
AS_Q_AUTO	ASResource.cpp	/^const string ASResource::AS_Q_AUTO = string("auto");$/;"	m	class:astyle::ASResource	file:
AS_Q_BACKGROUND	ASResource.cpp	/^const string ASResource::AS_Q_BACKGROUND = string("background");$/;"	m	class:astyle::ASResource	file:
AS_Q_FOLDL	ASResource.cpp	/^const string ASResource::AS_Q_FOLDL = string("foldl");$/;"	m	class:astyle::ASResource	file:
AS_Q_FOLDR	ASResource.cpp	/^const string ASResource::AS_Q_FOLDR = string("foldr");$/;"	m	class:astyle::ASResource	file:
AS_Q_HASH	ASResource.cpp	/^const string ASResource::AS_Q_HASH = string("hash");$/;"	m	class:astyle::ASResource	file:
AS_Q_LIST	ASResource.cpp	/^const string ASResource::AS_Q_LIST = string("list");$/;"	m	class:astyle::ASResource	file:
AS_Q_MY	ASResource.cpp	/^const string ASResource::AS_Q_MY = string("my");$/;"	m	class:astyle::ASResource	file:
AS_Q_NOTHING	ASResource.cpp	/^const string ASResource::AS_Q_NOTHING = string("NOTHING");$/;"	m	class:astyle::ASResource	file:
AS_Q_NOTHING	ASResource.cpp	/^const string ASResource::AS_Q_NOTHING = string("nothing");$/;"	m	class:astyle::ASResource	file:
AS_Q_NULL	ASResource.cpp	/^const string ASResource::AS_Q_NULL = string("NULL");$/;"	m	class:astyle::ASResource	file:
AS_Q_OBJECT	ASResource.cpp	/^const string ASResource::AS_Q_OBJECT = string("object");$/;"	m	class:astyle::ASResource	file:
AS_Q_OUR	ASResource.cpp	/^const string ASResource::AS_Q_OUR = string("our");$/;"	m	class:astyle::ASResource	file:
AS_Q_REFERENCE	ASResource.cpp	/^const string ASResource::AS_Q_REFERENCE = string("binary");$/;"	m	class:astyle::ASResource	file:
AS_Q_REFERENCE	ASResource.cpp	/^const string ASResource::AS_Q_REFERENCE = string("reference");$/;"	m	class:astyle::ASResource	file:
AS_Q_REG_EXP_MATCH	ASResource.cpp	/^const string ASResource::AS_Q_REG_EXP_MATCH = string("=~");$/;"	m	class:astyle::ASResource	file:
AS_Q_REG_EXP_NO_MATCH	ASResource.cpp	/^const string ASResource::AS_Q_REG_EXP_NO_MATCH = string("!~");$/;"	m	class:astyle::ASResource	file:
AS_Q_SELECT	ASResource.cpp	/^const string ASResource::AS_Q_SELECT = string("select");$/;"	m	class:astyle::ASResource	file:
AS_Q_WEEK_ASSIGN	ASResource.cpp	/^const string ASResource::AS_Q_WEEK_ASSIGN = string(":=");$/;"	m	class:astyle::ASResource	file:
AS_REINTERPRET_CAST	ASResource.cpp	/^const string ASResource::AS_REINTERPRET_CAST = string("reinterpret_cast");$/;"	m	class:astyle::ASResource	file:
AS_REMOVE	ASResource.cpp	/^const string ASResource::AS_REMOVE = string("remove");$/;"	m	class:astyle::ASResource	file:
AS_RETURN	ASResource.cpp	/^const string ASResource::AS_RETURN = string("return");$/;"	m	class:astyle::ASResource	file:
AS_SCOPE_RESOLUTION	ASResource.cpp	/^const string ASResource::AS_SCOPE_RESOLUTION = string("::");$/;"	m	class:astyle::ASResource	file:
AS_SEALED	ASResource.cpp	/^const string ASResource::AS_SEALED = string("sealed");$/;"	m	class:astyle::ASResource	file:
AS_SELECTOR	ASResource.cpp	/^const string ASResource::AS_SELECTOR = string("selector");$/;"	m	class:astyle::ASResource	file:
AS_SEMICOLON	ASResource.cpp	/^const string ASResource::AS_SEMICOLON = string(";");$/;"	m	class:astyle::ASResource	file:
AS_SET	ASResource.cpp	/^const string ASResource::AS_SET = string("set");$/;"	m	class:astyle::ASResource	file:
AS_STATIC	ASResource.cpp	/^const string ASResource::AS_STATIC = string("static");$/;"	m	class:astyle::ASResource	file:
AS_STATIC_CAST	ASResource.cpp	/^const string ASResource::AS_STATIC_CAST = string("static_cast");$/;"	m	class:astyle::ASResource	file:
AS_STRUCT	ASResource.cpp	/^const string ASResource::AS_STRUCT = string("struct");$/;"	m	class:astyle::ASResource	file:
AS_SWITCH	ASResource.cpp	/^const string ASResource::AS_SWITCH = string("switch");$/;"	m	class:astyle::ASResource	file:
AS_SYNCHRONIZED	ASResource.cpp	/^const string ASResource::AS_SYNCHRONIZED = string("synchronized");$/;"	m	class:astyle::ASResource	file:
AS_TEMPLATE	ASResource.cpp	/^const string ASResource::AS_TEMPLATE = string("template");$/;"	m	class:astyle::ASResource	file:
AS_THROW	ASResource.cpp	/^const string ASResource::AS_THROW = string("throw");$/;"	m	class:astyle::ASResource	file:
AS_THROWS	ASResource.cpp	/^const string ASResource::AS_THROWS = string("throws");$/;"	m	class:astyle::ASResource	file:
AS_TRY	ASResource.cpp	/^const string ASResource::AS_TRY = string("try");$/;"	m	class:astyle::ASResource	file:
AS_UNCHECKED	ASResource.cpp	/^const string ASResource::AS_UNCHECKED = string("unchecked");$/;"	m	class:astyle::ASResource	file:
AS_UNION	ASResource.cpp	/^const string ASResource::AS_UNION = string("union");$/;"	m	class:astyle::ASResource	file:
AS_UNSAFE	ASResource.cpp	/^const string ASResource::AS_UNSAFE = string("unsafe");$/;"	m	class:astyle::ASResource	file:
AS_USING	ASResource.cpp	/^const string ASResource::AS_USING = string("using");$/;"	m	class:astyle::ASResource	file:
AS_VOLATILE	ASResource.cpp	/^const string ASResource::AS_VOLATILE = string("volatile");$/;"	m	class:astyle::ASResource	file:
AS_WHERE	ASResource.cpp	/^const string ASResource::AS_WHERE = string("where");$/;"	m	class:astyle::ASResource	file:
AS_WHILE	ASResource.cpp	/^const string ASResource::AS_WHILE = string("while");$/;"	m	class:astyle::ASResource	file:
AS_XOR_ASSIGN	ASResource.cpp	/^const string ASResource::AS_XOR_ASSIGN = string("^=");$/;"	m	class:astyle::ASResource	file:
AS__ASM__	ASResource.cpp	/^const string ASResource::AS__ASM__ = string("__asm__");$/;"	m	class:astyle::ASResource	file:
AStyleGetVersion	astyle_main.cpp	/^extern "C" EXPORT const char* STDCALL AStyleGetVersion(void)$/;"	f
AStyleMain	astyle_main.cpp	/^extern "C" EXPORT char* STDCALL AStyleMain(const char* pSourceIn,		\/\/ the source to be formatted$/;"	f
AStyleMainUtf16	astyle_main.cpp	/^extern "C" EXPORT char16_t* STDCALL AStyleMainUtf16(const char16_t* pSourceIn,	\/\/ the source to be formatted$/;"	f
Bulgarian	ASLocalizer.cpp	/^Bulgarian::Bulgarian()	\/\/ български$/;"	f	class:astyle::Bulgarian
ChineseSimplified	ASLocalizer.cpp	/^ChineseSimplified::ChineseSimplified()	\/\/ 中文（简体）$/;"	f	class:astyle::ChineseSimplified
ChineseTraditional	ASLocalizer.cpp	/^ChineseTraditional::ChineseTraditional()	\/\/ 中文（繁體）$/;"	f	class:astyle::ChineseTraditional
Dutch	ASLocalizer.cpp	/^Dutch::Dutch()	\/\/ Nederlandse$/;"	f	class:astyle::Dutch
English	ASLocalizer.cpp	/^English::English()$/;"	f	class:astyle::English
Estonian	ASLocalizer.cpp	/^Estonian::Estonian()	\/\/ Eesti$/;"	f	class:astyle::Estonian
Finnish	ASLocalizer.cpp	/^Finnish::Finnish()	\/\/ Suomeksi$/;"	f	class:astyle::Finnish
French	ASLocalizer.cpp	/^French::French()	\/\/ Française$/;"	f	class:astyle::French
German	ASLocalizer.cpp	/^German::German()	\/\/ Deutsch$/;"	f	class:astyle::German
Greek	ASLocalizer.cpp	/^Greek::Greek()	\/\/ ελληνικά$/;"	f	class:astyle::Greek
Hindi	ASLocalizer.cpp	/^Hindi::Hindi()	\/\/ हिन्दी$/;"	f	class:astyle::Hindi
Hungarian	ASLocalizer.cpp	/^Hungarian::Hungarian()	\/\/ Magyar$/;"	f	class:astyle::Hungarian
Italian	ASLocalizer.cpp	/^Italian::Italian()	\/\/ Italiano$/;"	f	class:astyle::Italian
Japanese	ASLocalizer.cpp	/^Japanese::Japanese()	\/\/ 日本語$/;"	f	class:astyle::Japanese
Java_AStyleInterface_AStyleGetVersion	astyle_main.cpp	/^jstring STDCALL Java_AStyleInterface_AStyleGetVersion(JNIEnv* env, jclass)$/;"	f
Java_AStyleInterface_AStyleMain	astyle_main.cpp	/^jstring STDCALL Java_AStyleInterface_AStyleMain(JNIEnv* env,$/;"	f
Korean	ASLocalizer.cpp	/^Korean::Korean()	\/\/ 한국의$/;"	f	class:astyle::Korean
Norwegian	ASLocalizer.cpp	/^Norwegian::Norwegian()	\/\/ Norsk$/;"	f	class:astyle::Norwegian
Polish	ASLocalizer.cpp	/^Polish::Polish()	\/\/ Polski$/;"	f	class:astyle::Polish
Portuguese	ASLocalizer.cpp	/^Portuguese::Portuguese()	\/\/ Português$/;"	f	class:astyle::Portuguese
Romanian	ASLocalizer.cpp	/^Romanian::Romanian()	\/\/ Română$/;"	f	class:astyle::Romanian
Russian	ASLocalizer.cpp	/^Russian::Russian()	\/\/ русский$/;"	f	class:astyle::Russian
Spanish	ASLocalizer.cpp	/^Spanish::Spanish()	\/\/ Español$/;"	f	class:astyle::Spanish
Swedish	ASLocalizer.cpp	/^Swedish::Swedish()	\/\/ Svenska$/;"	f	class:astyle::Swedish
UNICODE	astyle_main.cpp	47;"	d	file:
Ukrainian	ASLocalizer.cpp	/^Ukrainian::Ukrainian()	\/\/ Український$/;"	f	class:astyle::Ukrainian
WinLangCode	ASLocalizer.cpp	/^struct WinLangCode$/;"	s	namespace:astyle	file:
_AS_EXCEPT	ASResource.cpp	/^const string ASResource::_AS_EXCEPT = string("__except");$/;"	m	class:astyle::ASResource	file:
_AS_FINALLY	ASResource.cpp	/^const string ASResource::_AS_FINALLY = string("__finally");$/;"	m	class:astyle::ASResource	file:
_AS_TRY	ASResource.cpp	/^const string ASResource::_AS_TRY = string("__try");$/;"	m	class:astyle::ASResource	file:
_CRT_glob	astyle_main.cpp	/^	int _CRT_glob = 0;$/;"	v
__USE_STD_IOSTREAM	ASLocalizer.cpp	47;"	d	file:
addBracesToStatement	ASFormatter.cpp	/^bool ASFormatter::addBracesToStatement()$/;"	f	class:astyle::ASFormatter
addPair	ASLocalizer.cpp	/^void Translation::addPair(const string& english, const wstring& translated)$/;"	f	class:astyle::Translation
adjustChecksumIn	ASFormatter.cpp	/^bool ASFormatter::adjustChecksumIn(int adjustment)$/;"	f	class:astyle::ASFormatter
adjustComments	ASFormatter.cpp	/^void ASFormatter::adjustComments()$/;"	f	class:astyle::ASFormatter
adjustIndentCountForBreakElseIfComments	ASBeautifier.cpp	/^int ASBeautifier::adjustIndentCountForBreakElseIfComments() const$/;"	f	class:astyle::ASBeautifier
adjustObjCMethodCallIndentation	ASBeautifier.cpp	/^void ASBeautifier::adjustObjCMethodCallIndentation(const string& line_)$/;"	f	class:astyle::ASBeautifier
adjustObjCMethodDefinitionIndentation	ASBeautifier.cpp	/^void ASBeautifier::adjustObjCMethodDefinitionIndentation(const string& line_)$/;"	f	class:astyle::ASBeautifier
adjustParsedLineIndentation	ASBeautifier.cpp	/^void ASBeautifier::adjustParsedLineIndentation(size_t iPrelim, bool isInExtraHeaderIndent)$/;"	f	class:astyle::ASBeautifier
appendChar	ASFormatter.cpp	/^void ASFormatter::appendChar(char ch, bool canBreakLine)$/;"	f	class:astyle::ASFormatter
appendCharInsideComments	ASFormatter.cpp	/^void ASFormatter::appendCharInsideComments()$/;"	f	class:astyle::ASFormatter
appendClosingHeader	ASFormatter.cpp	/^void ASFormatter::appendClosingHeader()$/;"	f	class:astyle::ASFormatter
appendOperator	ASFormatter.cpp	/^void ASFormatter::appendOperator(const string& sequence, bool canBreakLine)$/;"	f	class:astyle::ASFormatter
appendSequence	ASFormatter.cpp	/^void ASFormatter::appendSequence(const string& sequence, bool canBreakLine)$/;"	f	class:astyle::ASFormatter
appendSpaceAfter	ASFormatter.cpp	/^void ASFormatter::appendSpaceAfter()$/;"	f	class:astyle::ASFormatter
appendSpacePad	ASFormatter.cpp	/^void ASFormatter::appendSpacePad()$/;"	f	class:astyle::ASFormatter
astyle	ASBeautifier.cpp	/^namespace astyle {$/;"	n	file:
astyle	ASEnhancer.cpp	/^namespace astyle {$/;"	n	file:
astyle	ASFormatter.cpp	/^namespace astyle {$/;"	n	file:
astyle	ASLocalizer.cpp	/^namespace astyle {$/;"	n	file:
astyle	ASResource.cpp	/^namespace astyle {$/;"	n	file:
astyle	astyle_main.cpp	/^namespace astyle {$/;"	n	file:
beautify	ASBeautifier.cpp	/^string ASBeautifier::beautify(const string& originalLine)$/;"	f	class:astyle::ASBeautifier
breakLine	ASFormatter.cpp	/^void ASFormatter::breakLine(bool isSplitLine \/*false*\/)$/;"	f	class:astyle::ASFormatter
buildAssignmentOperators	ASResource.cpp	/^void ASResource::buildAssignmentOperators(vector<const string*>* assignmentOperators)$/;"	f	class:astyle::ASResource
buildCastOperators	ASResource.cpp	/^void ASResource::buildCastOperators(vector<const string*>* castOperators)$/;"	f	class:astyle::ASResource
buildHeaders	ASResource.cpp	/^void ASResource::buildHeaders(vector<const string*>* headers, int fileType, bool beautifier)$/;"	f	class:astyle::ASResource
buildIndentableHeaders	ASResource.cpp	/^void ASResource::buildIndentableHeaders(vector<const string*>* indentableHeaders)$/;"	f	class:astyle::ASResource
buildIndentableMacros	ASResource.cpp	/^void ASResource::buildIndentableMacros(vector<const pair<const string, const string>* >* indentableMacros)$/;"	f	class:astyle::ASResource
buildLanguageVectors	ASFormatter.cpp	/^void ASFormatter::buildLanguageVectors()$/;"	f	class:astyle::ASFormatter
buildNonAssignmentOperators	ASResource.cpp	/^void ASResource::buildNonAssignmentOperators(vector<const string*>* nonAssignmentOperators)$/;"	f	class:astyle::ASResource
buildNonParenHeaders	ASResource.cpp	/^void ASResource::buildNonParenHeaders(vector<const string*>* nonParenHeaders, int fileType, bool beautifier)$/;"	f	class:astyle::ASResource
buildOperators	ASResource.cpp	/^void ASResource::buildOperators(vector<const string*>* operators, int fileType)$/;"	f	class:astyle::ASResource
buildPreBlockStatements	ASResource.cpp	/^void ASResource::buildPreBlockStatements(vector<const string*>* preBlockStatements, int fileType)$/;"	f	class:astyle::ASResource
buildPreCommandHeaders	ASResource.cpp	/^void ASResource::buildPreCommandHeaders(vector<const string*>* preCommandHeaders, int fileType)$/;"	f	class:astyle::ASResource
buildPreDefinitionHeaders	ASResource.cpp	/^void ASResource::buildPreDefinitionHeaders(vector<const string*>* preDefinitionHeaders, int fileType)$/;"	f	class:astyle::ASResource
canonicalLang	ASLocalizer.cpp	/^	char canonicalLang[3];$/;"	m	struct:astyle::WinLangCode	file:
checkForHeaderFollowingComment	ASFormatter.cpp	/^const string* ASFormatter::checkForHeaderFollowingComment(const string& firstLine) const$/;"	f	class:astyle::ASFormatter
checkIfTemplateOpener	ASFormatter.cpp	/^void ASFormatter::checkIfTemplateOpener()$/;"	f	class:astyle::ASFormatter
clearFormattedLineSplitPoints	ASFormatter.cpp	/^void ASFormatter::clearFormattedLineSplitPoints()$/;"	f	class:astyle::ASFormatter
clearObjCMethodDefinitionAlignment	ASBeautifier.cpp	/^void ASBeautifier::clearObjCMethodDefinitionAlignment()$/;"	f	class:astyle::ASBeautifier
commentAndHeaderFollows	ASFormatter.cpp	/^bool ASFormatter::commentAndHeaderFollows()$/;"	f	class:astyle::ASFormatter
computeChecksumIn	ASFormatter.cpp	/^bool ASFormatter::computeChecksumIn(const string& currentLine_)$/;"	f	class:astyle::ASFormatter
computeChecksumOut	ASFormatter.cpp	/^bool ASFormatter::computeChecksumOut(const string& beautifiedLine)$/;"	f	class:astyle::ASFormatter
computeObjCColonAlignment	ASBeautifier.cpp	/^int ASBeautifier::computeObjCColonAlignment(const string& line, int colonAlignPosition) const$/;"	f	class:astyle::ASBeautifier
computePreliminaryIndentation	ASBeautifier.cpp	/^void ASBeautifier::computePreliminaryIndentation()$/;"	f	class:astyle::ASBeautifier
computePreprocessorIndent	ASBeautifier.cpp	/^pair<int, int> ASBeautifier::computePreprocessorIndent()$/;"	f	class:astyle::ASBeautifier
convertForceTabIndentToSpaces	ASEnhancer.cpp	/^void ASEnhancer::convertForceTabIndentToSpaces(string& line) const$/;"	f	class:astyle::ASEnhancer
convertLineEnds	astyle_main.cpp	/^void ASConsole::convertLineEnds(ostringstream& out, int lineEnd)$/;"	f	class:astyle::ASConsole
convertSpaceIndentToForceTab	ASEnhancer.cpp	/^void ASEnhancer::convertSpaceIndentToForceTab(string& line) const$/;"	f	class:astyle::ASEnhancer
convertTabToSpaces	ASBeautifier.cpp	/^int ASBeautifier::convertTabToSpaces(int i, int tabIncrementIn) const$/;"	f	class:astyle::ASBeautifier
convertTabToSpaces	ASFormatter.cpp	/^void ASFormatter::convertTabToSpaces()$/;"	f	class:astyle::ASFormatter
convertToMultiByte	ASLocalizer.cpp	/^string Translation::convertToMultiByte(const wstring& wideStr) const$/;"	f	class:astyle::Translation
convertUtf16ToUtf8	astyle_main.cpp	/^char* ASLibrary::convertUtf16ToUtf8(const char16_t* utf16In) const$/;"	f	class:astyle::ASLibrary
convertUtf8ToUtf16	astyle_main.cpp	/^char16_t* ASLibrary::convertUtf8ToUtf16(const char* utf8In, fpAlloc fpMemoryAlloc) const$/;"	f	class:astyle::ASLibrary
copyTempStacks	ASBeautifier.cpp	/^vector<vector<const string*>*>* ASBeautifier::copyTempStacks(const ASBeautifier& other) const$/;"	f	class:astyle::ASBeautifier
correctMixedLineEnds	astyle_main.cpp	/^void ASConsole::correctMixedLineEnds(ostringstream& out)$/;"	f	class:astyle::ASConsole
deleteBeautifierContainer	ASBeautifier.cpp	/^void ASBeautifier::deleteBeautifierContainer(vector<ASBeautifier*>*& container)$/;"	f	class:astyle::ASBeautifier
deleteBeautifierVectors	ASBeautifier.cpp	/^void ASBeautifier::deleteBeautifierVectors()$/;"	f	class:astyle::ASBeautifier
deleteContainer	ASBeautifier.cpp	/^void ASBeautifier::deleteContainer(T& container)$/;"	f	class:astyle::ASBeautifier
deleteContainer	ASFormatter.cpp	/^void ASFormatter::deleteContainer(T& container)$/;"	f	class:astyle::ASFormatter
deleteContainer	ASFormatter.cpp	/^void ASFormatter::deleteContainer(vector<BraceType>*& container)$/;"	f	class:astyle::ASFormatter
deleteTempStacksContainer	ASBeautifier.cpp	/^void ASBeautifier::deleteTempStacksContainer(vector<vector<const string*>*>*& container)$/;"	f	class:astyle::ASBeautifier
detectEncoding	astyle_main.cpp	/^FileEncoding ASConsole::detectEncoding(const char* data, size_t dataSize) const$/;"	f	class:astyle::ASConsole
displayLastError	astyle_main.cpp	/^void ASConsole::displayLastError()$/;"	f	class:astyle::ASConsole
enhance	ASEnhancer.cpp	/^void ASEnhancer::enhance(string& line, bool isInNamespace, bool isInPreprocessor, bool isInSQL)$/;"	f	class:astyle::ASEnhancer
error	astyle_main.cpp	/^void ASConsole::error() const$/;"	f	class:astyle::ASConsole
error	astyle_main.cpp	/^void ASConsole::error(const char* why, const char* what) const$/;"	f	class:astyle::ASConsole
extractPreprocessorStatement	ASBeautifier.cpp	/^string ASBeautifier::extractPreprocessorStatement(const string& line) const$/;"	f	class:astyle::ASBeautifier
fileExists	astyle_main.cpp	/^bool ASConsole::fileExists(const char* file) const$/;"	f	class:astyle::ASConsole
fileNameVectorIsEmpty	astyle_main.cpp	/^bool ASConsole::fileNameVectorIsEmpty() const$/;"	f	class:astyle::ASConsole
findCaseColon	ASEnhancer.cpp	/^size_t ASEnhancer::findCaseColon(const string& line, size_t caseIndex) const$/;"	f	class:astyle::ASEnhancer
findFormattedLineSplitPoint	ASFormatter.cpp	/^size_t ASFormatter::findFormattedLineSplitPoint() const$/;"	f	class:astyle::ASFormatter
findHeader	ASResource.cpp	/^const string* ASBase::findHeader(const string& line, int i,$/;"	f	class:astyle::ASBase
findKeyword	ASResource.cpp	/^bool ASBase::findKeyword(const string& line, int i, const string& keyword) const$/;"	f	class:astyle::ASBase
findNextChar	ASFormatter.cpp	/^size_t ASFormatter::findNextChar(const string& line, char searchChar, int searchStart \/*0*\/) const$/;"	f	class:astyle::ASFormatter
findObjCColonAlignment	ASBeautifier.cpp	/^int ASBeautifier::findObjCColonAlignment(const string& line) const$/;"	f	class:astyle::ASBeautifier
findObjCColonAlignment	ASFormatter.cpp	/^int ASFormatter::findObjCColonAlignment() const$/;"	f	class:astyle::ASFormatter
findOperator	ASResource.cpp	/^const string* ASBase::findOperator(const string& line, int i,$/;"	f	class:astyle::ASBase
findProjectOptionFilePath	astyle_main.cpp	/^string ASConsole::findProjectOptionFilePath(const string& fileName_) const$/;"	f	class:astyle::ASConsole
fixOptionVariableConflicts	ASFormatter.cpp	/^void ASFormatter::fixOptionVariableConflicts()$/;"	f	class:astyle::ASFormatter
formatArrayBraces	ASFormatter.cpp	/^void ASFormatter::formatArrayBraces(BraceType braceType, bool isOpeningArrayBrace)$/;"	f	class:astyle::ASFormatter
formatArrayRunIn	ASFormatter.cpp	/^void ASFormatter::formatArrayRunIn()$/;"	f	class:astyle::ASFormatter
formatCinToCout	astyle_main.cpp	/^void ASConsole::formatCinToCout()$/;"	f	class:astyle::ASConsole
formatClosingBrace	ASFormatter.cpp	/^void ASFormatter::formatClosingBrace(BraceType braceType)$/;"	f	class:astyle::ASFormatter
formatCommentBody	ASFormatter.cpp	/^void ASFormatter::formatCommentBody()$/;"	f	class:astyle::ASFormatter
formatCommentCloser	ASFormatter.cpp	/^void ASFormatter::formatCommentCloser()$/;"	f	class:astyle::ASFormatter
formatCommentOpener	ASFormatter.cpp	/^void ASFormatter::formatCommentOpener()$/;"	f	class:astyle::ASFormatter
formatFile	astyle_main.cpp	/^void ASConsole::formatFile(const string& fileName_)$/;"	f	class:astyle::ASConsole
formatLineCommentBody	ASFormatter.cpp	/^void ASFormatter::formatLineCommentBody()$/;"	f	class:astyle::ASFormatter
formatLineCommentOpener	ASFormatter.cpp	/^void ASFormatter::formatLineCommentOpener()$/;"	f	class:astyle::ASFormatter
formatOpeningBrace	ASFormatter.cpp	/^void ASFormatter::formatOpeningBrace(BraceType braceType)$/;"	f	class:astyle::ASFormatter
formatPointerOrReference	ASFormatter.cpp	/^void ASFormatter::formatPointerOrReference()$/;"	f	class:astyle::ASFormatter
formatPointerOrReferenceCast	ASFormatter.cpp	/^void ASFormatter::formatPointerOrReferenceCast()$/;"	f	class:astyle::ASFormatter
formatPointerOrReferenceToMiddle	ASFormatter.cpp	/^void ASFormatter::formatPointerOrReferenceToMiddle()$/;"	f	class:astyle::ASFormatter
formatPointerOrReferenceToName	ASFormatter.cpp	/^void ASFormatter::formatPointerOrReferenceToName()$/;"	f	class:astyle::ASFormatter
formatPointerOrReferenceToType	ASFormatter.cpp	/^void ASFormatter::formatPointerOrReferenceToType()$/;"	f	class:astyle::ASFormatter
formatQuoteBody	ASFormatter.cpp	/^void ASFormatter::formatQuoteBody()$/;"	f	class:astyle::ASFormatter
formatQuoteOpener	ASFormatter.cpp	/^void ASFormatter::formatQuoteOpener()$/;"	f	class:astyle::ASFormatter
formatRunIn	ASFormatter.cpp	/^void ASFormatter::formatRunIn()$/;"	f	class:astyle::ASFormatter
formatUtf16	astyle_main.cpp	/^char16_t* ASLibrary::formatUtf16(const char16_t* pSourceIn,		\/\/ the source to be formatted$/;"	f	class:astyle::ASLibrary
g_env	astyle_main.cpp	/^	JNIEnv*   g_env;$/;"	m	namespace:astyle	file:
g_fileSeparator	astyle_main.cpp	/^		char g_fileSeparator = '\\\\';     \/\/ Windows file separator$/;"	m	namespace:astyle	file:
g_isCaseSensitive	astyle_main.cpp	/^		bool g_isCaseSensitive = false;  \/\/ Windows IS NOT case sensitive$/;"	m	namespace:astyle	file:
g_mid	astyle_main.cpp	/^	jmethodID g_mid;$/;"	m	namespace:astyle	file:
g_obj	astyle_main.cpp	/^	jobject   g_obj;$/;"	m	namespace:astyle	file:
g_preprocessorCppExternCBrace	ASBeautifier.cpp	/^static int g_preprocessorCppExternCBrace;$/;"	m	namespace:astyle	file:
g_version	astyle_main.cpp	/^const char* g_version = "3.1 beta";$/;"	m	namespace:astyle	file:
getAlignMethodColon	ASBeautifier.cpp	/^bool ASBeautifier::getAlignMethodColon() const$/;"	f	class:astyle::ASBeautifier
getArgvOptions	astyle_main.cpp	/^vector<string> ASConsole::getArgvOptions(int argc, char** argv) const$/;"	f	class:astyle::ASConsole
getBeautifierFileType	ASBeautifier.cpp	/^int ASBeautifier::getBeautifierFileType() const$/;"	f	class:astyle::ASBeautifier
getBigEndian	astyle_main.cpp	/^bool ASEncoding::getBigEndian() const$/;"	f	class:astyle::ASEncoding
getBlockIndent	ASBeautifier.cpp	/^bool ASBeautifier::getBlockIndent() const$/;"	f	class:astyle::ASBeautifier
getBraceIndent	ASBeautifier.cpp	/^bool ASBeautifier::getBraceIndent() const$/;"	f	class:astyle::ASBeautifier
getBraceType	ASFormatter.cpp	/^BraceType ASFormatter::getBraceType()$/;"	f	class:astyle::ASFormatter
getCaseIndent	ASBeautifier.cpp	/^bool ASBeautifier::getCaseIndent() const$/;"	f	class:astyle::ASBeautifier
getChecksumDiff	ASFormatter.cpp	/^int ASFormatter::getChecksumDiff() const$/;"	f	class:astyle::ASFormatter
getChecksumIn	ASFormatter.cpp	/^size_t ASFormatter::getChecksumIn() const$/;"	f	class:astyle::ASFormatter
getChecksumOut	ASFormatter.cpp	/^size_t ASFormatter::getChecksumOut() const$/;"	f	class:astyle::ASFormatter
getClassIndent	ASBeautifier.cpp	/^bool ASBeautifier::getClassIndent() const$/;"	f	class:astyle::ASBeautifier
getContinuationIndentAssign	ASBeautifier.cpp	/^int ASBeautifier::getContinuationIndentAssign(const string& line, size_t currPos) const$/;"	f	class:astyle::ASBeautifier
getContinuationIndentComma	ASBeautifier.cpp	/^int ASBeautifier::getContinuationIndentComma(const string& line, size_t currPos) const$/;"	f	class:astyle::ASBeautifier
getCurrentDirectory	astyle_main.cpp	/^string ASConsole::getCurrentDirectory(const string& fileName_) const$/;"	f	class:astyle::ASConsole
getCurrentLineCommentAdjustment	ASFormatter.cpp	/^int ASFormatter::getCurrentLineCommentAdjustment()$/;"	f	class:astyle::ASFormatter
getCurrentWord	ASResource.cpp	/^string ASBase::getCurrentWord(const string& line, size_t index) const$/;"	f	class:astyle::ASBase
getEmptyLineFill	ASBeautifier.cpp	/^bool ASBeautifier::getEmptyLineFill() const$/;"	f	class:astyle::ASBeautifier
getErrorStream	astyle_main.cpp	/^ostream* ASConsole::getErrorStream() const$/;"	f	class:astyle::ASConsole
getExcludeHitsVector	astyle_main.cpp	/^vector<bool> ASConsole::getExcludeHitsVector() const$/;"	f	class:astyle::ASConsole
getExcludeVector	astyle_main.cpp	/^vector<string> ASConsole::getExcludeVector() const$/;"	f	class:astyle::ASConsole
getFileName	astyle_main.cpp	/^vector<string> ASConsole::getFileName() const$/;"	f	class:astyle::ASConsole
getFileNameVector	astyle_main.cpp	/^vector<string> ASConsole::getFileNameVector() const$/;"	f	class:astyle::ASConsole
getFileNames	astyle_main.cpp	/^void ASConsole::getFileNames(const string& directory, const vector<string>& wildcards)$/;"	f	class:astyle::ASConsole
getFileOptionsVector	astyle_main.cpp	/^vector<string> ASConsole::getFileOptionsVector() const$/;"	f	class:astyle::ASConsole
getFilePaths	astyle_main.cpp	/^void ASConsole::getFilePaths(const string& filePath)$/;"	f	class:astyle::ASConsole
getFileType	ASBeautifier.cpp	/^int ASBeautifier::getFileType() const$/;"	f	class:astyle::ASBeautifier
getFilesAreIdentical	astyle_main.cpp	/^bool ASConsole::getFilesAreIdentical() const$/;"	f	class:astyle::ASConsole
getFilesFormatted	astyle_main.cpp	/^int ASConsole::getFilesFormatted() const$/;"	f	class:astyle::ASConsole
getFollowingOperator	ASFormatter.cpp	/^const string* ASFormatter::getFollowingOperator() const$/;"	f	class:astyle::ASFormatter
getForceTabIndentation	ASBeautifier.cpp	/^bool ASBeautifier::getForceTabIndentation() const$/;"	f	class:astyle::ASBeautifier
getFormatterFileType	ASFormatter.cpp	/^int ASFormatter::getFormatterFileType() const$/;"	f	class:astyle::ASFormatter
getFullPathName	astyle_main.cpp	/^string ASConsole::getFullPathName(const string& relativePath) const$/;"	f	class:astyle::ASConsole
getIgnoreExcludeErrors	astyle_main.cpp	/^bool ASConsole::getIgnoreExcludeErrors() const$/;"	f	class:astyle::ASConsole
getIgnoreExcludeErrorsDisplay	astyle_main.cpp	/^bool ASConsole::getIgnoreExcludeErrorsDisplay() const$/;"	f	class:astyle::ASConsole
getIndentLength	ASBeautifier.cpp	/^int ASBeautifier::getIndentLength() const$/;"	f	class:astyle::ASBeautifier
getIndentString	ASBeautifier.cpp	/^string ASBeautifier::getIndentString() const$/;"	f	class:astyle::ASBeautifier
getIndentedLineReturn	ASBeautifier.cpp	/^const string& ASBeautifier::getIndentedLineReturn(const string& newLine, const string& originalLine) const$/;"	f	class:astyle::ASBeautifier
getIndentedSpaceEquivalent	ASBeautifier.cpp	/^string ASBeautifier::getIndentedSpaceEquivalent(const string& line_) const$/;"	f	class:astyle::ASBeautifier
getIsDryRun	astyle_main.cpp	/^bool ASConsole::getIsDryRun() const$/;"	f	class:astyle::ASConsole
getIsFormattedOnly	astyle_main.cpp	/^bool ASConsole::getIsFormattedOnly() const$/;"	f	class:astyle::ASConsole
getIsLineReady	ASFormatter.cpp	/^bool ASFormatter::getIsLineReady() const$/;"	f	class:astyle::ASFormatter
getIsQuiet	astyle_main.cpp	/^bool ASConsole::getIsQuiet() const$/;"	f	class:astyle::ASConsole
getIsRecursive	astyle_main.cpp	/^bool ASConsole::getIsRecursive() const$/;"	f	class:astyle::ASConsole
getIsVerbose	astyle_main.cpp	/^bool ASConsole::getIsVerbose() const$/;"	f	class:astyle::ASConsole
getLanguageID	ASLocalizer.cpp	/^string ASLocalizer::getLanguageID() const$/;"	f	class:astyle::ASLocalizer
getLanguageID	astyle_main.cpp	/^string ASConsole::getLanguageID() const$/;"	f	class:astyle::ASConsole
getLineEndChange	astyle_main.cpp	/^bool ASStreamIterator<T>::getLineEndChange(int lineEndFormat) const$/;"	f	class:astyle::ASStreamIterator
getLineEndFormat	ASFormatter.cpp	/^LineEndFormat ASFormatter::getLineEndFormat() const$/;"	f	class:astyle::ASFormatter
getLineEndsMixed	astyle_main.cpp	/^bool ASConsole::getLineEndsMixed() const$/;"	f	class:astyle::ASConsole
getModeManuallySet	ASBeautifier.cpp	/^bool ASBeautifier::getModeManuallySet() const$/;"	f	class:astyle::ASBeautifier
getModifierIndent	ASBeautifier.cpp	/^bool ASBeautifier::getModifierIndent() const$/;"	f	class:astyle::ASBeautifier
getNamespaceIndent	ASBeautifier.cpp	/^bool ASBeautifier::getNamespaceIndent() const$/;"	f	class:astyle::ASBeautifier
getNextChar	ASFormatter.cpp	/^bool ASFormatter::getNextChar()$/;"	f	class:astyle::ASFormatter
getNextLine	ASFormatter.cpp	/^bool ASFormatter::getNextLine(bool emptyLineWasDeleted \/*false*\/)$/;"	f	class:astyle::ASFormatter
getNextLineCommentAdjustment	ASFormatter.cpp	/^int ASFormatter::getNextLineCommentAdjustment()$/;"	f	class:astyle::ASFormatter
getNextProgramCharDistance	ASBeautifier.cpp	/^int ASBeautifier::getNextProgramCharDistance(const string& line, int i) const$/;"	f	class:astyle::ASBeautifier
getNextWord	ASBeautifier.cpp	/^string ASBeautifier::getNextWord(const string& line, size_t currPos) const$/;"	f	class:astyle::ASBeautifier
getNoBackup	astyle_main.cpp	/^bool ASConsole::getNoBackup() const$/;"	f	class:astyle::ASConsole
getNumberFormat	astyle_main.cpp	/^string ASConsole::getNumberFormat(int num, const char* groupingArg, const char* separator) const$/;"	f	class:astyle::ASConsole
getNumberFormat	astyle_main.cpp	/^string ASConsole::getNumberFormat(int num, size_t \/*lcid*\/) const$/;"	f	class:astyle::ASConsole
getNumberFormat	astyle_main.cpp	/^string ASConsole::getNumberFormat(int num, size_t lcid) const$/;"	f	class:astyle::ASConsole
getObjCFollowingKeyword	ASBeautifier.cpp	/^int ASBeautifier::getObjCFollowingKeyword(const string& line, int bracePos) const$/;"	f	class:astyle::ASBeautifier
getOptionErrors	astyle_main.cpp	/^string ASOptions::getOptionErrors() const$/;"	f	class:astyle::ASOptions
getOptionFileName	astyle_main.cpp	/^string ASConsole::getOptionFileName() const$/;"	f	class:astyle::ASConsole
getOptionsVector	astyle_main.cpp	/^vector<string> ASConsole::getOptionsVector() const$/;"	f	class:astyle::ASConsole
getOrigSuffix	astyle_main.cpp	/^string ASConsole::getOrigSuffix() const$/;"	f	class:astyle::ASConsole
getParam	astyle_main.cpp	/^string ASConsole::getParam(const string& arg, const char* op)$/;"	f	class:astyle::ASConsole
getParam	astyle_main.cpp	/^string ASOptions::getParam(const string& arg, const char* op)$/;"	f	class:astyle::ASOptions
getParam	astyle_main.cpp	/^string ASOptions::getParam(const string& arg, const char* op1, const char* op2)$/;"	f	class:astyle::ASOptions
getParentDirectory	astyle_main.cpp	/^string ASConsole::getParentDirectory(const string& absPath) const$/;"	f	class:astyle::ASConsole
getPreprocDefineIndent	ASBeautifier.cpp	/^bool ASBeautifier::getPreprocDefineIndent() const$/;"	f	class:astyle::ASBeautifier
getPreserveDate	astyle_main.cpp	/^bool ASConsole::getPreserveDate() const$/;"	f	class:astyle::ASConsole
getPreviousWord	ASFormatter.cpp	/^string ASFormatter::getPreviousWord(const string& line, int currPos) const$/;"	f	class:astyle::ASFormatter
getProjectOptionFileName	astyle_main.cpp	/^string ASConsole::getProjectOptionFileName() const$/;"	f	class:astyle::ASConsole
getProjectOptionsVector	astyle_main.cpp	/^vector<string> ASConsole::getProjectOptionsVector() const$/;"	f	class:astyle::ASConsole
getStdPathIn	astyle_main.cpp	/^string ASConsole::getStdPathIn() const$/;"	f	class:astyle::ASConsole
getStdPathOut	astyle_main.cpp	/^string ASConsole::getStdPathOut() const$/;"	f	class:astyle::ASConsole
getStreamLength	astyle_main.cpp	/^int ASStreamIterator<T>::getStreamLength() const$/;"	f	class:astyle::ASStreamIterator
getSwitchIndent	ASBeautifier.cpp	/^bool ASBeautifier::getSwitchIndent() const$/;"	f	class:astyle::ASBeautifier
getTabLength	ASBeautifier.cpp	/^int ASBeautifier::getTabLength() const$/;"	f	class:astyle::ASBeautifier
getTargetFilenames	astyle_main.cpp	/^void ASConsole::getTargetFilenames(string& targetFilename_,$/;"	f	class:astyle::ASConsole
getTranslationClass	ASLocalizer.cpp	/^const Translation* ASLocalizer::getTranslationClass() const$/;"	f	class:astyle::ASLocalizer
getTranslationString	ASLocalizer.cpp	/^string Translation::getTranslationString(size_t i) const$/;"	f	class:astyle::Translation
getTranslationVectorSize	ASLocalizer.cpp	/^size_t Translation::getTranslationVectorSize() const$/;"	f	class:astyle::Translation
getWideTranslation	ASLocalizer.cpp	/^bool Translation::getWideTranslation(const string& stringIn, wstring& wideOut) const$/;"	f	class:astyle::Translation
goForward	ASFormatter.cpp	/^void ASFormatter::goForward(int i)$/;"	f	class:astyle::ASFormatter
hasMoreLines	ASFormatter.cpp	/^bool ASFormatter::hasMoreLines() const$/;"	f	class:astyle::ASFormatter
importOptions	astyle_main.cpp	/^void ASOptions::importOptions(stringstream& in, vector<string>& optionsVector)$/;"	f	class:astyle::ASOptions
indentLine	ASEnhancer.cpp	/^int ASEnhancer::indentLine(string& line, int indent) const$/;"	f	class:astyle::ASEnhancer
indexOf	ASBeautifier.cpp	/^int ASBeautifier::indexOf(const vector<const string*>& container, const string* element) const$/;"	f	class:astyle::ASBeautifier
init	ASBeautifier.cpp	/^void ASBeautifier::init(ASSourceIterator* iter)$/;"	f	class:astyle::ASBeautifier
init	ASEnhancer.cpp	/^void ASEnhancer::init(int  _fileType,$/;"	f	class:astyle::ASEnhancer
init	ASFormatter.cpp	/^void ASFormatter::init(ASSourceIterator* si)$/;"	f	class:astyle::ASFormatter
initContainer	ASBeautifier.cpp	/^void ASBeautifier::initContainer(T& container, T value)$/;"	f	class:astyle::ASBeautifier
initContainer	ASFormatter.cpp	/^void ASFormatter::initContainer(T& container, T value)$/;"	f	class:astyle::ASFormatter
initContainer	ASFormatter.cpp	/^void ASFormatter::initContainer(vector<BraceType>*& container, vector<BraceType>* value)$/;"	f	class:astyle::ASFormatter
initNewLine	ASFormatter.cpp	/^void ASFormatter::initNewLine()$/;"	f	class:astyle::ASFormatter
initTempStacksContainer	ASBeautifier.cpp	/^void ASBeautifier::initTempStacksContainer(vector<vector<const string*>*>*& container,$/;"	f	class:astyle::ASBeautifier
initVectors	ASBeautifier.cpp	/^void ASBeautifier::initVectors()$/;"	f	class:astyle::ASBeautifier
initializeOutputEOL	astyle_main.cpp	/^void ASConsole::initializeOutputEOL(LineEndFormat lineEndFormat)$/;"	f	class:astyle::ASConsole
isArrayOperator	ASFormatter.cpp	/^bool ASFormatter::isArrayOperator() const$/;"	f	class:astyle::ASFormatter
isBeforeAnyComment	ASFormatter.cpp	/^bool ASFormatter::isBeforeAnyComment() const$/;"	f	class:astyle::ASFormatter
isBeforeAnyLineEndComment	ASFormatter.cpp	/^bool ASFormatter::isBeforeAnyLineEndComment(int startPos) const$/;"	f	class:astyle::ASFormatter
isBeforeComment	ASFormatter.cpp	/^bool ASFormatter::isBeforeComment() const$/;"	f	class:astyle::ASFormatter
isBeforeMultipleLineEndComments	ASFormatter.cpp	/^bool ASFormatter::isBeforeMultipleLineEndComments(int startPos) const$/;"	f	class:astyle::ASFormatter
isBeginDeclareSectionSQL	ASEnhancer.cpp	/^bool ASEnhancer::isBeginDeclareSectionSQL(const string& line, size_t index) const$/;"	f	class:astyle::ASEnhancer
isBraceType	ASFormatter.cpp	/^bool ASFormatter::isBraceType(BraceType a, BraceType b) const$/;"	f	class:astyle::ASFormatter
isCharPotentialHeader	ASResource.cpp	/^bool ASBase::isCharPotentialHeader(const string& line, size_t i) const$/;"	f	class:astyle::ASBase
isCharPotentialOperator	ASResource.cpp	/^bool ASBase::isCharPotentialOperator(char ch) const$/;"	f	class:astyle::ASBase
isClassInitializer	ASFormatter.cpp	/^bool ASFormatter::isClassInitializer() const$/;"	f	class:astyle::ASFormatter
isClosingHeader	ASFormatter.cpp	/^bool ASFormatter::isClosingHeader(const string* header) const$/;"	f	class:astyle::ASFormatter
isCurrentBraceBroken	ASFormatter.cpp	/^bool ASFormatter::isCurrentBraceBroken() const$/;"	f	class:astyle::ASFormatter
isDereferenceOrAddressOf	ASFormatter.cpp	/^bool ASFormatter::isDereferenceOrAddressOf() const$/;"	f	class:astyle::ASFormatter
isDigit	ASResource.cpp	/^bool ASBase::isDigit(char ch) const$/;"	f	class:astyle::ASBase
isDigitSeparator	ASResource.cpp	/^bool ASBase::isDigitSeparator(const string& line, int i) const$/;"	f	class:astyle::ASBase
isEmptyLine	ASFormatter.cpp	/^bool ASFormatter::isEmptyLine(const string& line) const$/;"	f	class:astyle::ASFormatter
isEndDeclareSectionSQL	ASEnhancer.cpp	/^bool ASEnhancer::isEndDeclareSectionSQL(const string& line, size_t index) const$/;"	f	class:astyle::ASEnhancer
isExecSQL	ASFormatter.cpp	/^bool ASFormatter::isExecSQL(const string& line, size_t index) const$/;"	f	class:astyle::ASFormatter
isExternC	ASFormatter.cpp	/^bool ASFormatter::isExternC() const$/;"	f	class:astyle::ASFormatter
isHomeOrInvalidAbsPath	astyle_main.cpp	/^bool ASConsole::isHomeOrInvalidAbsPath(const string& absPath) const$/;"	f	class:astyle::ASConsole
isImmediatelyPostCast	ASFormatter.cpp	/^bool ASFormatter::isImmediatelyPostCast() const$/;"	f	class:astyle::ASFormatter
isInExponent	ASFormatter.cpp	/^bool ASFormatter::isInExponent() const$/;"	f	class:astyle::ASFormatter
isInPreprocessorUnterminatedComment	ASBeautifier.cpp	/^bool ASBeautifier::isInPreprocessorUnterminatedComment(const string& line)$/;"	f	class:astyle::ASBeautifier
isInSwitchStatement	ASFormatter.cpp	/^bool ASFormatter::isInSwitchStatement() const$/;"	f	class:astyle::ASFormatter
isIndentablePreprocessorBlock	ASFormatter.cpp	/^bool ASFormatter::isIndentablePreprocessorBlock(const string& firstLine, size_t index)$/;"	f	class:astyle::ASFormatter
isIndentedPreprocessor	ASBeautifier.cpp	/^bool ASBeautifier::isIndentedPreprocessor(const string& line, size_t currPos) const$/;"	f	class:astyle::ASBeautifier
isLegalNameChar	ASResource.cpp	/^bool ASBase::isLegalNameChar(char ch) const$/;"	f	class:astyle::ASBase
isLineBreakBeforeClosingHeader	ASFormatter.cpp	/^void ASFormatter::isLineBreakBeforeClosingHeader()$/;"	f	class:astyle::ASFormatter
isLineEndComment	ASBeautifier.cpp	/^bool ASBeautifier::isLineEndComment(const string& line, int startPos) const$/;"	f	class:astyle::ASBeautifier
isMultiStatementLine	ASFormatter.cpp	/^bool ASFormatter::isMultiStatementLine() const$/;"	f	class:astyle::ASFormatter
isNDefPreprocStatement	ASFormatter.cpp	/^bool ASFormatter::isNDefPreprocStatement(const string& nextLine_, const string& preproc) const$/;"	f	class:astyle::ASFormatter
isNextCharOpeningBrace	ASFormatter.cpp	/^bool ASFormatter::isNextCharOpeningBrace(int startChar) const$/;"	f	class:astyle::ASFormatter
isNextWordSharpNonParenHeader	ASFormatter.cpp	/^bool ASFormatter::isNextWordSharpNonParenHeader(int startChar) const$/;"	f	class:astyle::ASFormatter
isNonInStatementArrayBrace	ASFormatter.cpp	/^bool ASFormatter::isNonInStatementArrayBrace() const$/;"	f	class:astyle::ASFormatter
isNumericVariable	ASFormatter.cpp	/^bool ASFormatter::isNumericVariable(string word) const$/;"	f	class:astyle::ASFormatter
isOkToBreakBlock	ASFormatter.cpp	/^bool ASFormatter::isOkToBreakBlock(BraceType braceType) const$/;"	f	class:astyle::ASFormatter
isOkToSplitFormattedLine	ASFormatter.cpp	/^bool ASFormatter::isOkToSplitFormattedLine()$/;"	f	class:astyle::ASFormatter
isOneLineBlockReached	ASEnhancer.cpp	/^bool ASEnhancer::isOneLineBlockReached(const string& line, int startChar) const$/;"	f	class:astyle::ASEnhancer
isOneLineBlockReached	ASFormatter.cpp	/^int ASFormatter::isOneLineBlockReached(const string& line, int startChar) const$/;"	f	class:astyle::ASFormatter
isOperatorPaddingDisabled	ASFormatter.cpp	/^bool ASFormatter::isOperatorPaddingDisabled() const$/;"	f	class:astyle::ASFormatter
isOption	astyle_main.cpp	/^bool ASConsole::isOption(const string& arg, const char* a, const char* b)$/;"	f	class:astyle::ASConsole
isOption	astyle_main.cpp	/^bool ASConsole::isOption(const string& arg, const char* op)$/;"	f	class:astyle::ASConsole
isOption	astyle_main.cpp	/^bool ASOptions::isOption(const string& arg, const char* op)$/;"	f	class:astyle::ASOptions
isOption	astyle_main.cpp	/^bool ASOptions::isOption(const string& arg, const char* op1, const char* op2)$/;"	f	class:astyle::ASOptions
isOptionError	astyle_main.cpp	/^void ASOptions::isOptionError(const string& arg, const string& errorInfo)$/;"	f	class:astyle::ASOptions
isParamOption	astyle_main.cpp	/^bool ASConsole::isParamOption(const string& arg, const char* option)$/;"	f	class:astyle::ASConsole
isParamOption	astyle_main.cpp	/^bool ASOptions::isParamOption(const string& arg, const char* option)$/;"	f	class:astyle::ASOptions
isParamOption	astyle_main.cpp	/^bool ASOptions::isParamOption(const string& arg, const char* option1, const char* option2)$/;"	f	class:astyle::ASOptions
isPathExclued	astyle_main.cpp	/^bool ASConsole::isPathExclued(const string& subPath)$/;"	f	class:astyle::ASConsole
isPointerOrReference	ASFormatter.cpp	/^bool ASFormatter::isPointerOrReference() const$/;"	f	class:astyle::ASFormatter
isPointerOrReferenceCentered	ASFormatter.cpp	/^bool ASFormatter::isPointerOrReferenceCentered() const$/;"	f	class:astyle::ASFormatter
isPointerOrReferenceVariable	ASFormatter.cpp	/^bool ASFormatter::isPointerOrReferenceVariable(const string& word) const$/;"	f	class:astyle::ASFormatter
isPointerToPointer	ASFormatter.cpp	/^bool ASFormatter::isPointerToPointer(const string& line, int currPos) const$/;"	f	class:astyle::ASFormatter
isPreprocessorConditionalCplusplus	ASBeautifier.cpp	/^bool ASBeautifier::isPreprocessorConditionalCplusplus(const string& line) const$/;"	f	class:astyle::ASBeautifier
isSharpStyleWithParen	ASFormatter.cpp	/^bool ASFormatter::isSharpStyleWithParen(const string* header) const$/;"	f	class:astyle::ASFormatter
isStructAccessModified	ASFormatter.cpp	/^bool ASFormatter::isStructAccessModified(const string& firstLine, size_t index) const$/;"	f	class:astyle::ASFormatter
isUnaryOperator	ASFormatter.cpp	/^bool ASFormatter::isUnaryOperator() const$/;"	f	class:astyle::ASFormatter
isUniformInitializerBrace	ASFormatter.cpp	/^bool ASFormatter::isUniformInitializerBrace() const$/;"	f	class:astyle::ASFormatter
javaErrorHandler	astyle_main.cpp	/^void STDCALL javaErrorHandler(int errorNumber, const char* errorMessage)$/;"	f
javaMemoryAlloc	astyle_main.cpp	/^char* STDCALL javaMemoryAlloc(unsigned long memoryNeeded)$/;"	f
launchDefaultBrowser	astyle_main.cpp	/^void ASConsole::launchDefaultBrowser(const char* filePathIn \/*nullptr*\/) const$/;"	f	class:astyle::ASConsole
main	astyle_main.cpp	/^int main(int argc, char** argv)$/;"	f
nextLine	ASFormatter.cpp	/^string ASFormatter::nextLine()$/;"	f	class:astyle::ASFormatter
nextLine	astyle_main.cpp	/^string ASStreamIterator<T>::nextLine(bool emptyLineWasDeleted)$/;"	f	class:astyle::ASStreamIterator
padObjCMethodColon	ASFormatter.cpp	/^void ASFormatter::padObjCMethodColon()$/;"	f	class:astyle::ASFormatter
padObjCMethodPrefix	ASFormatter.cpp	/^void ASFormatter::padObjCMethodPrefix()$/;"	f	class:astyle::ASFormatter
padObjCParamType	ASFormatter.cpp	/^void ASFormatter::padObjCParamType()$/;"	f	class:astyle::ASFormatter
padObjCReturnType	ASFormatter.cpp	/^void ASFormatter::padObjCReturnType()$/;"	f	class:astyle::ASFormatter
padOperators	ASFormatter.cpp	/^void ASFormatter::padOperators(const string* newOperator)$/;"	f	class:astyle::ASFormatter
padParens	ASFormatter.cpp	/^void ASFormatter::padParens()$/;"	f	class:astyle::ASFormatter
parseCurrentLine	ASBeautifier.cpp	/^void ASBeautifier::parseCurrentLine(const string& line)$/;"	f	class:astyle::ASBeautifier
parseCurrentLine	ASEnhancer.cpp	/^void ASEnhancer::parseCurrentLine(string& line, bool isInPreprocessor, bool isInSQL)$/;"	f	class:astyle::ASEnhancer
parseOption	astyle_main.cpp	/^void ASOptions::parseOption(const string& arg, const string& errorInfo)$/;"	f	class:astyle::ASOptions
parseOptions	astyle_main.cpp	/^bool ASOptions::parseOptions(vector<string>& optionsVector, const string& errorInfo)$/;"	f	class:astyle::ASOptions
peekNextChar	ASFormatter.cpp	/^char ASFormatter::peekNextChar() const$/;"	f	class:astyle::ASFormatter
peekNextChar	ASResource.cpp	/^char ASBase::peekNextChar(const string& line, int i) const$/;"	f	class:astyle::ASBase
peekNextLine	astyle_main.cpp	/^string ASStreamIterator<T>::peekNextLine()$/;"	f	class:astyle::ASStreamIterator
peekNextText	ASFormatter.cpp	/^string ASFormatter::peekNextText(const string& firstLine,$/;"	f	class:astyle::ASFormatter
peekReset	astyle_main.cpp	/^void ASStreamIterator<T>::peekReset()$/;"	f	class:astyle::ASStreamIterator
pointerSymbolFollows	ASFormatter.cpp	/^bool ASFormatter::pointerSymbolFollows() const$/;"	f	class:astyle::ASFormatter
popLastContinuationIndent	ASBeautifier.cpp	/^void ASBeautifier::popLastContinuationIndent()$/;"	f	class:astyle::ASBeautifier
preLineWS	ASBeautifier.cpp	/^string ASBeautifier::preLineWS(int lineIndentCount, int lineSpaceIndentCount) const$/;"	f	class:astyle::ASBeautifier
printHelp	astyle_main.cpp	/^void ASConsole::printHelp() const$/;"	f	class:astyle::ASConsole
printMsg	astyle_main.cpp	/^void ASConsole::printMsg(const char* msg, const string& data) const$/;"	f	class:astyle::ASConsole
printSeparatingLine	astyle_main.cpp	/^void ASConsole::printSeparatingLine() const$/;"	f	class:astyle::ASConsole
printVerboseHeader	astyle_main.cpp	/^void ASConsole::printVerboseHeader() const$/;"	f	class:astyle::ASConsole
printVerboseStats	astyle_main.cpp	/^void ASConsole::printVerboseStats(clock_t startTime) const$/;"	f	class:astyle::ASConsole
processFiles	astyle_main.cpp	/^void ASConsole::processFiles()$/;"	f	class:astyle::ASConsole
processOptions	astyle_main.cpp	/^void ASConsole::processOptions(const vector<string>& argvOptions)$/;"	f	class:astyle::ASConsole
processPreprocessor	ASBeautifier.cpp	/^void ASBeautifier::processPreprocessor(const string& preproc, const string& line)$/;"	f	class:astyle::ASBeautifier
processPreprocessor	ASFormatter.cpp	/^void ASFormatter::processPreprocessor()$/;"	f	class:astyle::ASFormatter
processSwitchBlock	ASEnhancer.cpp	/^size_t ASEnhancer::processSwitchBlock(string& line, size_t index)$/;"	f	class:astyle::ASEnhancer
readFile	astyle_main.cpp	/^FileEncoding ASConsole::readFile(const string& fileName_, stringstream& in) const$/;"	f	class:astyle::ASConsole
registerContinuationIndent	ASBeautifier.cpp	/^void ASBeautifier::registerContinuationIndent(const string& line, int i, int spaceIndentCount_,$/;"	f	class:astyle::ASBeautifier
registerContinuationIndentColon	ASBeautifier.cpp	/^void ASBeautifier::registerContinuationIndentColon(const string& line, int i, int tabIncrementIn)$/;"	f	class:astyle::ASBeautifier
removeBracesFromStatement	ASFormatter.cpp	/^bool ASFormatter::removeBracesFromStatement()$/;"	f	class:astyle::ASFormatter
removeFile	astyle_main.cpp	/^void ASConsole::removeFile(const char* fileName_, const char* errMsg) const$/;"	f	class:astyle::ASConsole
renameFile	astyle_main.cpp	/^void ASConsole::renameFile(const char* oldFileName, const char* newFileName, const char* errMsg) const$/;"	f	class:astyle::ASConsole
resetEndOfStatement	ASFormatter.cpp	/^void ASFormatter::resetEndOfStatement()$/;"	f	class:astyle::ASFormatter
rtrim	ASBeautifier.cpp	/^string ASBeautifier::rtrim(const string& str) const$/;"	f	class:astyle::ASBeautifier
saveLastInputLine	astyle_main.cpp	/^void ASStreamIterator<T>::saveLastInputLine()$/;"	f	class:astyle::ASStreamIterator
setAddBracesMode	ASFormatter.cpp	/^void ASFormatter::setAddBracesMode(bool state)$/;"	f	class:astyle::ASFormatter
setAddBracketsMode	ASFormatter.cpp	/^void ASFormatter::setAddBracketsMode(bool state)$/;"	f	class:astyle::ASFormatter
setAddOneLineBracesMode	ASFormatter.cpp	/^void ASFormatter::setAddOneLineBracesMode(bool state)$/;"	f	class:astyle::ASFormatter
setAddOneLineBracketsMode	ASFormatter.cpp	/^void ASFormatter::setAddOneLineBracketsMode(bool state)$/;"	f	class:astyle::ASFormatter
setAfterParenIndent	ASBeautifier.cpp	/^void ASBeautifier::setAfterParenIndent(bool state)$/;"	f	class:astyle::ASBeautifier
setAlignMethodColon	ASBeautifier.cpp	/^void ASBeautifier::setAlignMethodColon(bool state)$/;"	f	class:astyle::ASBeautifier
setAttachClass	ASFormatter.cpp	/^void ASFormatter::setAttachClass(bool state)$/;"	f	class:astyle::ASFormatter
setAttachClosingBraceMode	ASFormatter.cpp	/^void ASFormatter::setAttachClosingBraceMode(bool state)$/;"	f	class:astyle::ASFormatter
setAttachClosingWhile	ASFormatter.cpp	/^void ASFormatter::setAttachClosingWhile(bool state)$/;"	f	class:astyle::ASFormatter
setAttachExternC	ASFormatter.cpp	/^void ASFormatter::setAttachExternC(bool state)$/;"	f	class:astyle::ASFormatter
setAttachInline	ASFormatter.cpp	/^void ASFormatter::setAttachInline(bool state)$/;"	f	class:astyle::ASFormatter
setAttachNamespace	ASFormatter.cpp	/^void ASFormatter::setAttachNamespace(bool state)$/;"	f	class:astyle::ASFormatter
setBlockIndent	ASBeautifier.cpp	/^void ASBeautifier::setBlockIndent(bool state)$/;"	f	class:astyle::ASBeautifier
setBraceFormatMode	ASFormatter.cpp	/^void ASFormatter::setBraceFormatMode(BraceMode mode)$/;"	f	class:astyle::ASFormatter
setBraceIndent	ASBeautifier.cpp	/^void ASBeautifier::setBraceIndent(bool state)$/;"	f	class:astyle::ASBeautifier
setBraceIndentVtk	ASBeautifier.cpp	/^void ASBeautifier::setBraceIndentVtk(bool state)$/;"	f	class:astyle::ASBeautifier
setBreakAfterMode	ASFormatter.cpp	/^void ASFormatter::setBreakAfterMode(bool state)$/;"	f	class:astyle::ASFormatter
setBreakBlocksMode	ASFormatter.cpp	/^void ASFormatter::setBreakBlocksMode(bool state)$/;"	f	class:astyle::ASFormatter
setBreakClosingHeaderBlocksMode	ASFormatter.cpp	/^void ASFormatter::setBreakClosingHeaderBlocksMode(bool state)$/;"	f	class:astyle::ASFormatter
setBreakClosingHeaderBracesMode	ASFormatter.cpp	/^void ASFormatter::setBreakClosingHeaderBracesMode(bool state)$/;"	f	class:astyle::ASFormatter
setBreakClosingHeaderBracketsMode	ASFormatter.cpp	/^void ASFormatter::setBreakClosingHeaderBracketsMode(bool state)$/;"	f	class:astyle::ASFormatter
setBreakElseIfsMode	ASFormatter.cpp	/^void ASFormatter::setBreakElseIfsMode(bool state)$/;"	f	class:astyle::ASFormatter
setBreakOneLineBlocksMode	ASFormatter.cpp	/^void ASFormatter::setBreakOneLineBlocksMode(bool state)$/;"	f	class:astyle::ASFormatter
setBreakOneLineHeadersMode	ASFormatter.cpp	/^void ASFormatter::setBreakOneLineHeadersMode(bool state)$/;"	f	class:astyle::ASFormatter
setBreakOneLineStatementsMode	ASFormatter.cpp	/^void ASFormatter::setBreakOneLineStatementsMode(bool state)$/;"	f	class:astyle::ASFormatter
setBypassBrowserOpen	astyle_main.cpp	/^void ASConsole::setBypassBrowserOpen(bool state)$/;"	f	class:astyle::ASConsole
setCStyle	ASBeautifier.cpp	/^void ASBeautifier::setCStyle()$/;"	f	class:astyle::ASBeautifier
setCaseIndent	ASBeautifier.cpp	/^void ASBeautifier::setCaseIndent(bool state)$/;"	f	class:astyle::ASBeautifier
setClassIndent	ASBeautifier.cpp	/^void ASBeautifier::setClassIndent(bool state)$/;"	f	class:astyle::ASBeautifier
setCloseTemplatesMode	ASFormatter.cpp	/^void ASFormatter::setCloseTemplatesMode(bool state)$/;"	f	class:astyle::ASFormatter
setCommaPaddingMode	ASFormatter.cpp	/^void ASFormatter::setCommaPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter
setContinuationIndentation	ASBeautifier.cpp	/^void ASBeautifier::setContinuationIndentation(int indent)$/;"	f	class:astyle::ASBeautifier
setDefaultTabLength	ASBeautifier.cpp	/^void ASBeautifier::setDefaultTabLength()$/;"	f	class:astyle::ASBeautifier
setDeleteEmptyLinesMode	ASFormatter.cpp	/^void ASFormatter::setDeleteEmptyLinesMode(bool state)$/;"	f	class:astyle::ASFormatter
setEmptyLineFill	ASBeautifier.cpp	/^void ASBeautifier::setEmptyLineFill(bool state)$/;"	f	class:astyle::ASBeautifier
setErrorStream	astyle_main.cpp	/^void ASConsole::setErrorStream(ostream* errStreamPtr)$/;"	f	class:astyle::ASConsole
setForceTabXIndentation	ASBeautifier.cpp	/^void ASBeautifier::setForceTabXIndentation(int length)$/;"	f	class:astyle::ASBeautifier
setFormattingStyle	ASFormatter.cpp	/^void ASFormatter::setFormattingStyle(FormatStyle style)$/;"	f	class:astyle::ASFormatter
setIgnoreExcludeErrors	astyle_main.cpp	/^void ASConsole::setIgnoreExcludeErrors(bool state)$/;"	f	class:astyle::ASConsole
setIgnoreExcludeErrorsAndDisplay	astyle_main.cpp	/^void ASConsole::setIgnoreExcludeErrorsAndDisplay(bool state)$/;"	f	class:astyle::ASConsole
setIndentCol1CommentsMode	ASFormatter.cpp	/^void ASFormatter::setIndentCol1CommentsMode(bool state)$/;"	f	class:astyle::ASFormatter
setIsDryRun	astyle_main.cpp	/^void ASConsole::setIsDryRun(bool state)$/;"	f	class:astyle::ASConsole
setIsFormattedOnly	astyle_main.cpp	/^void ASConsole::setIsFormattedOnly(bool state)$/;"	f	class:astyle::ASConsole
setIsQuiet	astyle_main.cpp	/^void ASConsole::setIsQuiet(bool state)$/;"	f	class:astyle::ASConsole
setIsRecursive	astyle_main.cpp	/^void ASConsole::setIsRecursive(bool state)$/;"	f	class:astyle::ASConsole
setIsVerbose	astyle_main.cpp	/^void ASConsole::setIsVerbose(bool state)$/;"	f	class:astyle::ASConsole
setJavaStyle	ASBeautifier.cpp	/^void ASBeautifier::setJavaStyle()$/;"	f	class:astyle::ASBeautifier
setLabelIndent	ASBeautifier.cpp	/^void ASBeautifier::setLabelIndent(bool state)$/;"	f	class:astyle::ASBeautifier
setLanguageFromLCID	ASLocalizer.cpp	/^void ASLocalizer::setLanguageFromLCID(size_t lcid)$/;"	f	class:astyle::ASLocalizer
setLanguageFromName	ASLocalizer.cpp	/^void ASLocalizer::setLanguageFromName(const char* langID)$/;"	f	class:astyle::ASLocalizer
setLineEndFormat	ASFormatter.cpp	/^void ASFormatter::setLineEndFormat(LineEndFormat fmt)$/;"	f	class:astyle::ASFormatter
setMaxCodeLength	ASFormatter.cpp	/^void ASFormatter::setMaxCodeLength(int max)$/;"	f	class:astyle::ASFormatter
setMaxContinuationIndentLength	ASBeautifier.cpp	/^void ASBeautifier::setMaxContinuationIndentLength(int max)$/;"	f	class:astyle::ASBeautifier
setMaxInStatementIndentLength	ASBeautifier.cpp	/^void ASBeautifier::setMaxInStatementIndentLength(int max)$/;"	f	class:astyle::ASBeautifier
setMethodPrefixPaddingMode	ASFormatter.cpp	/^void ASFormatter::setMethodPrefixPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter
setMethodPrefixUnPaddingMode	ASFormatter.cpp	/^void ASFormatter::setMethodPrefixUnPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter
setMinConditionalIndentLength	ASBeautifier.cpp	/^void ASBeautifier::setMinConditionalIndentLength()$/;"	f	class:astyle::ASBeautifier
setMinConditionalIndentOption	ASBeautifier.cpp	/^void ASBeautifier::setMinConditionalIndentOption(int min)$/;"	f	class:astyle::ASBeautifier
setModeManuallySet	ASBeautifier.cpp	/^void ASBeautifier::setModeManuallySet(bool state)$/;"	f	class:astyle::ASBeautifier
setModifierIndent	ASBeautifier.cpp	/^void ASBeautifier::setModifierIndent(bool state)$/;"	f	class:astyle::ASBeautifier
setNamespaceIndent	ASBeautifier.cpp	/^void ASBeautifier::setNamespaceIndent(bool state)$/;"	f	class:astyle::ASBeautifier
setNoBackup	astyle_main.cpp	/^void ASConsole::setNoBackup(bool state)$/;"	f	class:astyle::ASConsole
setObjCColonPaddingMode	ASFormatter.cpp	/^void ASFormatter::setObjCColonPaddingMode(ObjCColonPad mode)$/;"	f	class:astyle::ASFormatter
setOperatorPaddingMode	ASFormatter.cpp	/^void ASFormatter::setOperatorPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter
setOptionFileName	astyle_main.cpp	/^void ASConsole::setOptionFileName(const string& name)$/;"	f	class:astyle::ASConsole
setOrigSuffix	astyle_main.cpp	/^void ASConsole::setOrigSuffix(const string& suffix)$/;"	f	class:astyle::ASConsole
setOutputEOL	astyle_main.cpp	/^void ASConsole::setOutputEOL(LineEndFormat lineEndFormat, const string& currentEOL)$/;"	f	class:astyle::ASConsole
setParamTypePaddingMode	ASFormatter.cpp	/^void ASFormatter::setParamTypePaddingMode(bool state)$/;"	f	class:astyle::ASFormatter
setParamTypeUnPaddingMode	ASFormatter.cpp	/^void ASFormatter::setParamTypeUnPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter
setParensFirstPaddingMode	ASFormatter.cpp	/^void ASFormatter::setParensFirstPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter
setParensHeaderPaddingMode	ASFormatter.cpp	/^void ASFormatter::setParensHeaderPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter
setParensInsidePaddingMode	ASFormatter.cpp	/^void ASFormatter::setParensInsidePaddingMode(bool state)$/;"	f	class:astyle::ASFormatter
setParensOutsidePaddingMode	ASFormatter.cpp	/^void ASFormatter::setParensOutsidePaddingMode(bool state)$/;"	f	class:astyle::ASFormatter
setParensUnPaddingMode	ASFormatter.cpp	/^void ASFormatter::setParensUnPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter
setPointerAlignment	ASFormatter.cpp	/^void ASFormatter::setPointerAlignment(PointerAlign alignment)$/;"	f	class:astyle::ASFormatter
setPreprocBlockIndent	ASFormatter.cpp	/^void ASFormatter::setPreprocBlockIndent(bool state)$/;"	f	class:astyle::ASFormatter
setPreprocConditionalIndent	ASBeautifier.cpp	/^void ASBeautifier::setPreprocConditionalIndent(bool state)$/;"	f	class:astyle::ASBeautifier
setPreprocDefineIndent	ASBeautifier.cpp	/^void ASBeautifier::setPreprocDefineIndent(bool state)$/;"	f	class:astyle::ASBeautifier
setPreserveDate	astyle_main.cpp	/^void ASConsole::setPreserveDate(bool state)$/;"	f	class:astyle::ASConsole
setProjectOptionFileName	astyle_main.cpp	/^void ASConsole::setProjectOptionFileName(const string& optfilepath)$/;"	f	class:astyle::ASConsole
setReferenceAlignment	ASFormatter.cpp	/^void ASFormatter::setReferenceAlignment(ReferenceAlign alignment)$/;"	f	class:astyle::ASFormatter
setRemoveBracesMode	ASFormatter.cpp	/^void ASFormatter::setRemoveBracesMode(bool state)$/;"	f	class:astyle::ASFormatter
setRemoveBracketsMode	ASFormatter.cpp	/^void ASFormatter::setRemoveBracketsMode(bool state)$/;"	f	class:astyle::ASFormatter
setReturnTypePaddingMode	ASFormatter.cpp	/^void ASFormatter::setReturnTypePaddingMode(bool state)$/;"	f	class:astyle::ASFormatter
setReturnTypeUnPaddingMode	ASFormatter.cpp	/^void ASFormatter::setReturnTypeUnPaddingMode(bool state)$/;"	f	class:astyle::ASFormatter
setSharpStyle	ASBeautifier.cpp	/^void ASBeautifier::setSharpStyle()$/;"	f	class:astyle::ASBeautifier
setSpaceIndentation	ASBeautifier.cpp	/^void ASBeautifier::setSpaceIndentation(int length)$/;"	f	class:astyle::ASBeautifier
setStdPathIn	astyle_main.cpp	/^void ASConsole::setStdPathIn(const string& path)$/;"	f	class:astyle::ASConsole
setStdPathOut	astyle_main.cpp	/^void ASConsole::setStdPathOut(const string& path)$/;"	f	class:astyle::ASConsole
setStripCommentPrefix	ASFormatter.cpp	/^void ASFormatter::setStripCommentPrefix(bool state)$/;"	f	class:astyle::ASFormatter
setSwitchIndent	ASBeautifier.cpp	/^void ASBeautifier::setSwitchIndent(bool state)$/;"	f	class:astyle::ASBeautifier
setTabIndentation	ASBeautifier.cpp	/^void ASBeautifier::setTabIndentation(int length, bool forceTabs)$/;"	f	class:astyle::ASBeautifier
setTabSpaceConversionMode	ASFormatter.cpp	/^void ASFormatter::setTabSpaceConversionMode(bool state)$/;"	f	class:astyle::ASFormatter
setTranslationClass	ASLocalizer.cpp	/^void ASLocalizer::setTranslationClass()$/;"	f	class:astyle::ASLocalizer
settext	ASLocalizer.cpp	/^const char* ASLocalizer::settext(const char* textIn) const$/;"	f	class:astyle::ASLocalizer
sleep	astyle_main.cpp	/^void ASConsole::sleep(int seconds) const$/;"	f	class:astyle::ASConsole
sortOnLength	ASResource.cpp	/^bool sortOnLength(const string* a, const string* b)$/;"	f	namespace:astyle
sortOnName	ASResource.cpp	/^bool sortOnName(const string* a, const string* b)$/;"	f	namespace:astyle
standardizePath	astyle_main.cpp	/^void ASConsole::standardizePath(string& path, bool removeBeginningSeparator \/*false*\/) const$/;"	f	class:astyle::ASConsole
statementEndsWithComma	ASBeautifier.cpp	/^bool ASBeautifier::statementEndsWithComma(const string& line, int index) const$/;"	f	class:astyle::ASBeautifier
stringEndsWith	astyle_main.cpp	/^bool ASConsole::stringEndsWith(const string& str, const string& suffix) const$/;"	f	class:astyle::ASConsole
stripCommentPrefix	ASFormatter.cpp	/^void ASFormatter::stripCommentPrefix()$/;"	f	class:astyle::ASFormatter
swap16bit	astyle_main.cpp	/^int ASEncoding::swap16bit(int value) const$/;"	f	class:astyle::ASEncoding
tellg	astyle_main.cpp	/^streamoff ASStreamIterator<T>::tellg()$/;"	f	class:astyle::ASStreamIterator
tempMemoryAllocation	astyle_main.cpp	/^char* STDCALL ASLibrary::tempMemoryAllocation(unsigned long memoryNeeded)$/;"	f	class:astyle::ASLibrary
testForTimeToSplitFormattedLine	ASFormatter.cpp	/^void ASFormatter::testForTimeToSplitFormattedLine()$/;"	f	class:astyle::ASFormatter
translate	ASLocalizer.cpp	/^string& Translation::translate(const string& stringIn) const$/;"	f	class:astyle::Translation
trim	ASBeautifier.cpp	/^string ASBeautifier::trim(const string& str) const$/;"	f	class:astyle::ASBeautifier
trimContinuationLine	ASFormatter.cpp	/^void ASFormatter::trimContinuationLine()$/;"	f	class:astyle::ASFormatter
unindentLine	ASEnhancer.cpp	/^int ASEnhancer::unindentLine(string& line, int unindent) const$/;"	f	class:astyle::ASEnhancer
updateExcludeVector	astyle_main.cpp	/^void ASConsole::updateExcludeVector(const string& suffixParam)$/;"	f	class:astyle::ASConsole
updateFormattedLineSplitPoints	ASFormatter.cpp	/^void ASFormatter::updateFormattedLineSplitPoints(char appendedChar)$/;"	f	class:astyle::ASFormatter
updateFormattedLineSplitPointsOperator	ASFormatter.cpp	/^void ASFormatter::updateFormattedLineSplitPointsOperator(const string& sequence)$/;"	f	class:astyle::ASFormatter
updateFormattedLineSplitPointsPointerOrReference	ASFormatter.cpp	/^void ASFormatter::updateFormattedLineSplitPointsPointerOrReference(size_t index)$/;"	f	class:astyle::ASFormatter
utf16LengthFromUtf8	astyle_main.cpp	/^size_t ASEncoding::utf16LengthFromUtf8(const char* utf8In, size_t len) const$/;"	f	class:astyle::ASEncoding
utf16ToUtf8	astyle_main.cpp	/^size_t ASEncoding::utf16ToUtf8(char* utf16In, size_t inLen, bool isBigEndian,$/;"	f	class:astyle::ASEncoding
utf16len	astyle_main.cpp	/^size_t ASEncoding::utf16len(const utf16* utf16In) const$/;"	f	class:astyle::ASEncoding
utf8LengthFromUtf16	astyle_main.cpp	/^size_t ASEncoding::utf8LengthFromUtf16(const char* utf16In, size_t inLen, bool isBigEndian) const$/;"	f	class:astyle::ASEncoding
utf8ToUtf16	astyle_main.cpp	/^size_t ASEncoding::utf8ToUtf16(char* utf8In, size_t inLen, bool isBigEndian, char* utf16Out) const$/;"	f	class:astyle::ASEncoding
waitForRemove	astyle_main.cpp	/^int ASConsole::waitForRemove(const char* newFileName) const$/;"	f	class:astyle::ASConsole
wildcmp	astyle_main.cpp	/^int ASConsole::wildcmp(const char* wild, const char* data) const$/;"	f	class:astyle::ASConsole
winLang	ASLocalizer.cpp	/^	size_t winLang;$/;"	m	struct:astyle::WinLangCode	file:
wlc	ASLocalizer.cpp	/^static WinLangCode wlc[] =$/;"	m	namespace:astyle	file:
writeFile	astyle_main.cpp	/^void ASConsole::writeFile(const string& fileName_, FileEncoding encoding, ostringstream& out) const$/;"	f	class:astyle::ASConsole
~ASBeautifier	ASBeautifier.cpp	/^ASBeautifier::~ASBeautifier()$/;"	f	class:astyle::ASBeautifier
~ASConsole	astyle_main.cpp	/^ASConsole::~ASConsole()$/;"	f	class:astyle::ASConsole
~ASEnhancer	ASEnhancer.cpp	/^ASEnhancer::~ASEnhancer()$/;"	f	class:astyle::ASEnhancer
~ASFormatter	ASFormatter.cpp	/^ASFormatter::~ASFormatter()$/;"	f	class:astyle::ASFormatter
~ASLocalizer	ASLocalizer.cpp	/^ASLocalizer::~ASLocalizer()$/;"	f	class:astyle::ASLocalizer
~ASStreamIterator	astyle_main.cpp	/^ASStreamIterator<T>::~ASStreamIterator()$/;"	f	class:astyle::ASStreamIterator
